crystal_doc_search_index_callback({"repository_name":"geojson","body":"# GeoJSON\n\n[![Crystal CI](https://github.com/geocrystal/geojson/actions/workflows/crystal.yml/badge.svg)](https://github.com/geocrystal/geojson/actions/workflows/crystal.yml)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://geocrystal.github.io/geojson/)\n[![License](https://img.shields.io/github/license/geocrystal/geojson.svg)](https://github.com/geocrystal/geojson/blob/master/LICENSE)\n\nCrystal library for reading and writing [GeoJSON](https://tools.ietf.org/html/rfc7946)\n\nThis library contains:\n\n- Functions for encoding and decoding GeoJSON formatted data\n- Classes for all GeoJSON Objects\n- Allow \"foreign members\" in a GeoJSON Objects\n\n## Installation\n\nAdd the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  geojson:\n    github: geocrystal/geojson\n```\n\nand run `shards install`\n\n```crystal\nrequire \"geojson\"\n```\n\n## Position\n\nA position is the fundamental geometry construct.  The `coordinates` member of a Geometry object is composed of either:\n\n- one position in the case of a `Point` geometry\n- an array of positions in the case of a `LineString` or `MultiPoint` geometry\n- an array of `LineString` or linear ring coordinates in the case of a `Polygon` or `MultiLineString` geometry\n- an array of `Polygon` coordinates in the case of a `MultiPolygon` geometry\n\nA position is an array of `Float64`.\n\nThere __must__ be two or more elements. The first two elements are `longitude` and `latitude`. `Altitude` __may__ be included as an optional third element.\n\n```crystal\npostition = [-80.1347334, 25.7663562, 0.0]\npoint = GeoJSON::Point.new(position)\n```\n\n## GeoJSON types\n\n### Point\n\nA GeoJSON point looks like this:\n\n```json\n{\n  \"type\": \"Point\",\n  \"coordinates\": [-80.1347334, 25.7663562]\n}\n```\n\nIt is important to note that coordinates is in the format `[longitude, latitude]`.\nLongitude comes before latitude in GeoJSON.\n\nFor type `Point`, the `coordinates` member is a single position.\n\nSerialize geometry type:\n\n```crystal\npoint = GeoJSON::Point.new([-80.1347334, 25.7663562])\njson = point.to_json\n# => {\"type\":\"Point\",\"coordinates\":[-80.1347334,25.7663562]}\n```\n\nDeserialize geometry type:\n\n```crystal\npoint = GeoJSON::Point.from_json(json)\n# => #<GeoJSON::Point:0x7f1444af9920>\npoint.longitude\n# => -80.1347334\npoint.latitude\n# => 25.7663562\n```\n\n### MultiPoint\n\nFor type `MultiPoint`, the `coordinates` member is an array of positions.\n\n```crystal\npoint1 = GeoJSON::Point.new(longitude: 100.0, latitude: 0.0)\npoint2 = GeoJSON::Point.new(longitude: 101.0, latitude: 1.0)\n\nmulti_point = GeoJSON::MultiPoint.new([point1, point2])\nmulti_point.to_json\n```\n\n```json\n{\n  \"type\":\"MultiPoint\",\n  \"coordinates\":[[100.0, 0.0], [101.0, 1.0]]\n}\n```\n\n### LineString\n\nFor type `LineString`, the `coordinates` member is an array of two or more positions.\n\n```crystal\nline_string = GeoJSON::LineString.new [[-124.2, 42.0], [-120.0, 42.0]]\nline_string.to_json\n```\n\n```json\n{\n  \"type\": \"LineString\",\n  \"coordinates\": [[-124.2, 42.0], [-120.0, 42.0]]\n}\n```\n\n### MultiLineString\n\nFor type `MultiLineString`, the `coordinates` member is an array of `LineString` coordinate arrays.\n\n```crystal\nline_string1 = GeoJSON::LineString.new([[100.0, 0.0], [101.0, 1.0]])\nline_string2 = GeoJSON::LineString.new([[102.0, 2.0], [103.0, 3.0]])\n\nmulti_line_string = GeoJSON::MultiLineString.new([line_string1, line_string2])\n```\n\n```crystal\nmulti_line_string = GeoJSON::MultiLineString.new([\n  [[100.0, 0.0], [101.0, 1.0]],\n  [[102.0, 2.0], [103.0, 3.0]],\n])\nmulti_line_string.to_json\n```\n\n```json\n{\n  \"type\":\"MultiLineString\",\n  \"coordinates\":[\n    [\n      [100.0, 0.0],\n      [101.0, 1.0]\n    ],\n    [\n      [102.0, 2.0],\n      [103.0, 3.0]\n    ]\n  ]\n}\n```\n\n### Polygon\n\nGeoJSON polygons represent closed shapes on a map, like triangles, squares, dodecagons, or any shape with a fixed number of sides.\n\nTo specify a constraint specific to `Polygon`, it is useful to introduce the concept of a linear ring:\n\n- A linear ring is a closed `LineString` with four or more positions.\n- The first and last positions are equivalent, and they __must__ contain identical values; their representation __should__ also be identical.\n- A linear ring is the boundary of a surface or the boundary of a hole in a surface.\n- A linear ring __must__ follow the right-hand rule with respect to the area it bounds, i.e., exterior rings are counterclockwise, and holes are clockwise.\n\nThe `Polygon` geometry type definition as follows:\n\n- For type `Polygon`, the `coordinates` member __must__ be an array of linear ring coordinate arrays.\n- For `Polygon` with more than one of these rings, the first __must__ be the exterior ring, and any others __must__ be interior rings. The exterior ring bounds the surface, and the interior rings (if present) bound holes within the surface.\n\n```crystal\npolygon = GeoJSON::Polygon.new([\n  [[-10.0, -10.0], [10.0, -10.0], [10.0, 10.0], [-10.0,-10.0]],\n  [[-1.0, -2.0], [3.0, -2.0], [3.0, 2.0], [-1.0,-2.0]]\n])\npolygon.to_json\n```\n\n```json\n{\n  \"type\": \"Polygon\",\n  \"coordinates\": [\n    [\n      [-10.0, -10.0],\n      [10.0, -10.0],\n      [10.0,10.0],\n      [-10.0,-10.0]\n    ],\n    [\n      [-1.0, -2.0],\n      [3.0, -2.0],\n      [3.0, 2.0],\n      [-1.0,-2.0]\n    ]\n  ]\n}\n```\n\n### MultiPolygon\n\nFor type `MultiPolygon`, the `coordinates` member is an array of `Polygon` coordinate arrays.\n\n```crystal\npolygon1 = GeoJSON::Polygon.new(\n  [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]]\n)\npolygon2 = GeoJSON::Polygon.new(\n  [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]]]\n)\n\nmulti_polygon = GeoJSON::MultiPolygon.new([polygon1, polygon2])\nmulti_polygon.to_json\n```\n\n```json\n{\n  \"type\":\"MultiPolygon\",\n  \"coordinates\":[\n    [\n      [\n        [102.0,2.0],\n        [103.0,2.0],\n        [103.0,3.0],\n        [102.0,3.0],\n        [102.0,2.0]\n      ]\n    ],\n    [\n      [\n        [100.0,0.0],\n        [101.0,0.0],\n        [101.0,1.0],\n        [100.0,1.0],\n        [100.0,0.0]\n      ]\n    ]\n  ]\n}\n```\n\n### GeometryCollection\n\nA GeoJSON object with type `GeometryCollection` is a Geometry object.\n\nA `GeometryCollection` has a member with the name `geometries`. The\nvalue of `geometries` is an array. Each element of this array is a\nGeoJSON Geometry object.\n\n```crystal\npoint = GeoJSON::Point.new([100.0, 0.0])\nline_string = GeoJSON::LineString.new([\n  [101.0, 0.0],\n  [102.0, 1.0],\n])\npolygon = GeoJSON::Polygon.new([\n  [\n    [100.0, 0.0],\n    [101.0, 0.0],\n    [101.0, 1.0],\n    [100.0, 1.0],\n    [100.0, 0.0],\n  ],\n])\n\ngeometry_collection = GeoJSON::GeometryCollection.new([point, line_string, polygon])\ngeometry_collection.to_json\n```\n\n```json\n{\n  \"type\":\"GeometryCollection\",\n  \"geometries\":[\n    {\n      \"type\":\"Point\",\n      \"coordinates\":[100.0,0.0]\n    },\n    {\n      \"type\":\"LineString\",\n      \"coordinates\":[\n        [101.0,0.0],\n        [102.0,1.0]\n      ]\n    },\n    {\n      \"type\":\"Polygon\",\n      \"coordinates\":[\n        [\n          [100.0,0.0],\n          [101.0,0.0],\n          [101.0,1.0],\n          [100.0,1.0],\n          [100.0,0.0]\n        ]\n      ]\n    }\n  ]\n}\n```\n\n### Feature\n\nA `Feature` object represents a spatially bounded thing. Every `Feature` object is a GeoJSON object no matter where it occurs in a GeoJSON text.\n\n- A `Feature` object has a `\"type\"` member with the value `\"Feature\"`.\n- A `Feature` object has a member with the name `\"geometry\"`. The value of the geometry member __shall__ be either a Geometry object as defined above or, in the case that the `Feature` is unlocated, a JSON `null` value.\n- A `Feature` object has a member with the name `\"properties\"`. The value of the properties member is an object (any JSON object or a JSON `null` value).\n- If a `Feature` has a commonly used identifier, that identifier __should__ be included as a member of the `Feature` object with the name `\"id\"`, and the value of this member is either a JSON string or number.\n\n```crystal\npoint = GeoJSON::Point.new([-80.1347334, 25.7663562])\nproperties = {\"color\" => \"red\"} of String => JSON::Any::Type\nfeature = GeoJSON::Feature.new(point, properties, id: 1)\nfeature.to_json\n```\n\n```json\n{\n  \"type\":\"Feature\",\n  \"geometry\":{\n    \"type\":\"Point\",\n    \"coordinates\":[-80.1347334,25.7663562]\n  },\n  \"properties\":{\n    \"color\":\"red\"\n  },\n  \"id\":1\n}\n```\n\n### FeatureCollection\n\nA GeoJSON object with the type `\"FeatureCollection\"` is a `FeatureCollection` object. A `FeatureCollection` object has a member with the name `\"features\"`. The value of `\"features\"` is a JSON array. Each element of the array is a `Feature` object. It is possible for this array to be empty.\n\n```crystal\nfeature1 = GeoJSON::Feature.new(\n  GeoJSON::Point.new([102.0, 0.5]),\n  id: \"point\"\n)\n\nfeature2 = GeoJSON::Feature.new(\n  GeoJSON::Polygon.new([\n    [\n      [100.0, 0.0],\n      [101.0, 0.0],\n      [101.0, 1.0],\n      [100.0, 1.0],\n      [100.0, 0.0],\n    ],\n  ]),\n  type: \"polygon\"\n)\n\nfeature_collection = GeoJSON::FeatureCollection.new([feature1, feature2])\nfeature_collection.to_json\n```\n\n```json\n{\n  \"type\":\"FeatureCollection\",\n  \"features\":[\n    {\n      \"type\":\"Feature\",\n      \"geometry\":{\n        \"type\":\"Point\",\n        \"coordinates\":[102.0,0.5]\n      },\n      \"properties\":null,\n      \"id\":\"point\"\n    },\n    {\n      \"type\":\"Feature\",\n      \"geometry\":{\n        \"type\":\"Polygon\",\n        \"coordinates\":[\n          [\n            [100.0,0.0],\n            [101.0,0.0],\n            [101.0,1.0],\n            [100.0,1.0],\n            [100.0,0.0]\n          ]\n        ]\n      },\n      \"properties\":null,\n      \"id\":\"polygon\"\n    }\n  ]\n}\n```\n\n## Foreign Members\n\nFor example, in the `Point` object shown below\n\n```json\n{\n  \"type\": \"Point\",\n  \"coordinates\": [-80.1347334, 25.7663562],\n  \"title\": \"Example Point\"\n}\n```\n\nthe name/value pair of `\"title\": \"Example Point\"` is a foreign member.\n\nGeoJSON semantics do not apply to foreign members and their descendants, regardless of their names and values.\n\nIf the GeoJSON type include foreign members, this properties in the JSON document will be stored in a `Hash(String, JSON::Any)`.\nOn serialization, any keys inside `json_unmapped` will be serialized and appended to the current json object.\n\n```crystal\npoint = GeoJSON::Point.new([-80.1347334, 25.7663562])\n\njson_unmapped = Hash(String, JSON::Any).new\njson_unmapped[\"title\"] = JSON::Any.new(\"Example Point\")\n\npoint.json_unmapped = json_unmapped\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/geocrystal/geojson/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Anton Maminov](https://github.com/mamantoha) - creator and maintainer\n\n## License\n\nCopyright: 2020-2024 Anton Maminov (anton.maminov@gmail.com)\n\nThis library is distributed under the MIT license. Please see the LICENSE file.\n","program":{"html_id":"geojson/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"geojson","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"geojson/GeoJSON","path":"GeoJSON.html","kind":"module","full_name":"GeoJSON","name":"GeoJSON","abstract":false,"locations":[{"filename":"src/geojson.cr","line_number":15,"url":null},{"filename":"src/geojson/coordinates.cr","line_number":1,"url":null},{"filename":"src/geojson/exception.cr","line_number":1,"url":null},{"filename":"src/geojson/feature.cr","line_number":3,"url":null},{"filename":"src/geojson/feature_collection.cr","line_number":1,"url":null},{"filename":"src/geojson/geometry_collection.cr","line_number":1,"url":null},{"filename":"src/geojson/line_string.cr","line_number":1,"url":null},{"filename":"src/geojson/multi_line_string.cr","line_number":1,"url":null},{"filename":"src/geojson/multi_point.cr","line_number":1,"url":null},{"filename":"src/geojson/multi_polygon.cr","line_number":1,"url":null},{"filename":"src/geojson/object.cr","line_number":1,"url":null},{"filename":"src/geojson/point.cr","line_number":1,"url":null},{"filename":"src/geojson/polygon.cr","line_number":1,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /__w/geojson/geojson/src`).chomp.stringify }}"}],"types":[{"html_id":"geojson/GeoJSON/Coordinates","path":"GeoJSON/Coordinates.html","kind":"class","full_name":"GeoJSON::Coordinates","name":"Coordinates","abstract":false,"superclass":{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/coordinates.cr","line_number":6,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `Coordinates` is a position in longitude, latitude, and (optionally)\naltitude.\n\nThis class corresponds to the [GeoJSON Position](https://tools.ietf.org/html/rfc7946#section-3.1.1).","summary":"<p>A <code><a href=\"../GeoJSON/Coordinates.html\">Coordinates</a></code> is a position in longitude, latitude, and (optionally) altitude.</p>","constructors":[{"html_id":"new(longitude:Float64,latitude:Float64,altitude:Float64|Nil=nil)-class-method","name":"new","doc":"Creates a new `Coordinates` with the given *longitude*, *latitude* and *altitude*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Coordinates.html\">Coordinates</a></code> with the given <em>longitude</em>, <em>latitude</em> and <em>altitude</em>.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":"Float64"},{"name":"latitude","external_name":"latitude","restriction":"Float64"},{"name":"altitude","default_value":"nil","external_name":"altitude","restriction":"Float64 | ::Nil"}],"args_string":"(longitude : Float64, latitude : Float64, altitude : Float64 | Nil = nil)","args_html":"(longitude : Float64, latitude : Float64, altitude : Float64 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/coordinates.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"longitude","external_name":"longitude","restriction":"Float64"},{"name":"latitude","external_name":"latitude","restriction":"Float64"},{"name":"altitude","default_value":"nil","external_name":"altitude","restriction":"Float64 | ::Nil"}],"visibility":"Public","body":"if altitude\n  new([longitude, latitude, altitude])\nelse\n  new([longitude, latitude])\nend"}},{"html_id":"new(coordinates:Array(Float64))-class-method","name":"new","doc":"Creates a new `Coordinates` with the given *coordinates* array.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Coordinates.html\">Coordinates</a></code> with the given <em>coordinates</em> array.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"}],"args_string":"(coordinates : Array(Float64))","args_html":"(coordinates : Array(Float64))","location":{"filename":"src/geojson/coordinates.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(parser:JSON::PullParser)-class-method","name":"new","doc":"Deserializes a `Coordinates` from the given JSON *parser*.","summary":"<p>Deserializes a <code><a href=\"../GeoJSON/Coordinates.html\">Coordinates</a></code> from the given JSON <em>parser</em>.</p>","abstract":false,"args":[{"name":"parser","external_name":"parser","restriction":"JSON::PullParser"}],"args_string":"(parser : JSON::PullParser)","args_html":"(parser : JSON::PullParser)","location":{"filename":"src/geojson/coordinates.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"parser","external_name":"parser","restriction":"JSON::PullParser"}],"visibility":"Public","body":"coordinates = Array(Float64).new(parser)\nnew(coordinates)\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif coordinates == other.coordinates\nelse\n  return false\nend\ntrue\n"}},{"html_id":"[](*args,**options)-instance-method","name":"[]","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/coordinates.cr","line_number":30,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/coordinates.cr","line_number":30,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"altitude-instance-method","name":"altitude","doc":"Gets this Coordinates' altitude.\n\nTechnically, this positional value is meant to be the height in meters\nabove the WGS84 ellipsoid.","summary":"<p>Gets this Coordinates' altitude.</p>","abstract":false,"location":{"filename":"src/geojson/coordinates.cr","line_number":46,"url":null},"def":{"name":"altitude","visibility":"Public","body":"coordinates[2]?"}},{"html_id":"coordinates:Array(Float64)-instance-method","name":"coordinates","abstract":false,"location":{"filename":"src/geojson/coordinates.cr","line_number":7,"url":null},"def":{"name":"coordinates","return_type":"Array(Float64)","visibility":"Public","body":"@coordinates"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = coordinates.hash(hasher)\nhasher\n"}},{"html_id":"latitude-instance-method","name":"latitude","doc":"Gets this Coordinates' latitude in decimal degrees according to WGS84.","summary":"<p>Gets this Coordinates' latitude in decimal degrees according to WGS84.</p>","abstract":false,"location":{"filename":"src/geojson/coordinates.cr","line_number":38,"url":null},"def":{"name":"latitude","visibility":"Public","body":"coordinates[1]"}},{"html_id":"longitude-instance-method","name":"longitude","doc":"Gets this Coordinates' longitude in decimal degrees according to WGS84.","summary":"<p>Gets this Coordinates' longitude in decimal degrees according to WGS84.</p>","abstract":false,"location":{"filename":"src/geojson/coordinates.cr","line_number":33,"url":null},"def":{"name":"longitude","visibility":"Public","body":"coordinates[0]"}},{"html_id":"to_json(*args,**options)-instance-method","name":"to_json","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/coordinates.cr","line_number":56,"url":null},"def":{"name":"to_json","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates.to_json(*args, **options)"}},{"html_id":"to_json(*args,**options,&)-instance-method","name":"to_json","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/coordinates.cr","line_number":56,"url":null},"def":{"name":"to_json","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.to_json(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"geojson/GeoJSON/Exception","path":"GeoJSON/Exception.html","kind":"class","full_name":"GeoJSON::Exception","name":"Exception","abstract":false,"superclass":{"html_id":"geojson/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"geojson/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/exception.cr","line_number":6,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"Raised when an attempt is made to create a GeoJSON object that is malformed.\n\nIn most cases, this means that the given coordinates for a geometry object\ndon't fulfill the requirements for that geometry type.","summary":"<p>Raised when an attempt is made to create a GeoJSON object that is malformed.</p>"},{"html_id":"geojson/GeoJSON/Feature","path":"GeoJSON/Feature.html","kind":"class","full_name":"GeoJSON::Feature","name":"Feature","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/feature.cr","line_number":6,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `Feature` represents a [GeoJSON Feature object](https://tools.ietf.org/html/rfc7946#section-3.2)\nwith a geometry and properties.","summary":"<p>A <code><a href=\"../GeoJSON/Feature.html\">Feature</a></code> represents a <a href=\"https://tools.ietf.org/html/rfc7946#section-3.2\">GeoJSON Feature object</a> with a geometry and properties.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `Feature` represents a [GeoJSON Feature object](https://tools.ietf.org/html/rfc7946#section-3.2)\nwith a geometry and properties.","summary":"<p>A <code><a href=\"../GeoJSON/Feature.html\">Feature</a></code> represents a <a href=\"https://tools.ietf.org/html/rfc7946#section-3.2\">GeoJSON Feature object</a> with a geometry and properties.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/feature.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(geometry:GeoJSON::Object|Nil,properties:Nil|Hash(String,Array(JSON::Any)|Bool|Float64|Hash(String,JSON::Any)|Int64|String|Nil)=nil,*,id:Int32|String|Nil=nil,bbox=nil)-class-method","name":"new","doc":"Creates a new `Feature` with the given *geometry* and optional\n*properties*, *id*, and bounding box *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Feature.html\">Feature</a></code> with the given <em>geometry</em> and optional <em>properties</em>, <em>id</em>, and bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"geometry","external_name":"geometry","restriction":"::GeoJSON::Object | ::Nil"},{"name":"properties","default_value":"nil","external_name":"properties","restriction":"::Nil | ::Hash(::String, ::Array(::JSON::Any) | ::Bool | ::Float64 | ::Hash(::String, ::JSON::Any) | ::Int64 | ::String | ::Nil)"},{"name":"","external_name":"","restriction":""},{"name":"id","default_value":"nil","external_name":"id","restriction":"::Int32 | ::String | ::Nil"},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(geometry : GeoJSON::Object | Nil, properties : Nil | Hash(String, Array(JSON::Any) | Bool | Float64 | Hash(String, JSON::Any) | Int64 | String | Nil) = nil, *, id : Int32 | String | Nil = nil, bbox = nil)","args_html":"(geometry : <a href=\"../GeoJSON/Object.html\">GeoJSON::Object</a> | Nil, properties : Nil | Hash(String, Array(JSON::Any) | Bool | Float64 | Hash(String, JSON::Any) | Int64 | String | Nil) = <span class=\"n\">nil</span>, *, id : Int32 | String | Nil = <span class=\"n\">nil</span>, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/feature.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"geometry","external_name":"geometry","restriction":"::GeoJSON::Object | ::Nil"},{"name":"properties","default_value":"nil","external_name":"properties","restriction":"::Nil | ::Hash(::String, ::Array(::JSON::Any) | ::Bool | ::Float64 | ::Hash(::String, ::JSON::Any) | ::Int64 | ::String | ::Nil)"},{"name":"","external_name":"","restriction":""},{"name":"id","default_value":"nil","external_name":"id","restriction":"::Int32 | ::String | ::Nil"},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":2,"visibility":"Public","body":"_ = allocate\n_.initialize(geometry, properties, id: id, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/feature.cr","line_number":26,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\ngeometry.try(&.bbox)\n"}},{"html_id":"geometry:GeoJSON::Object::Type|Nil-instance-method","name":"geometry","doc":"Gets this Feature's geometry.","summary":"<p>Gets this Feature's geometry.</p>","abstract":false,"location":{"filename":"src/geojson/feature.cr","line_number":12,"url":null},"def":{"name":"geometry","return_type":"GeoJSON::Object::Type | ::Nil","visibility":"Public","body":"@geometry"}},{"html_id":"id:String|Int32|Nil-instance-method","name":"id","doc":"Gets this Feature's id.","summary":"<p>Gets this Feature's id.</p>","abstract":false,"location":{"filename":"src/geojson/feature.cr","line_number":19,"url":null},"def":{"name":"id","return_type":"String | Int32 | Nil","visibility":"Public","body":"@id"}},{"html_id":"properties:Hash(String,JSON::Any::Type)|Nil-instance-method","name":"properties","doc":"Gets this Feature's properties.","summary":"<p>Gets this Feature's properties.</p>","abstract":false,"location":{"filename":"src/geojson/feature.cr","line_number":16,"url":null},"def":{"name":"properties","return_type":"Hash(String, JSON::Any::Type) | ::Nil","visibility":"Public","body":"@properties"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this Feature's GeoJSON type (\"Feature\")","summary":"<p>Gets this Feature's GeoJSON type (&quot;Feature&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/feature.cr","line_number":8,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/FeatureCollection","path":"GeoJSON/FeatureCollection.html","kind":"class","full_name":"GeoJSON::FeatureCollection","name":"FeatureCollection","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/feature_collection.cr","line_number":4,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `FeatureCollection` represents a [GeoJSON FeatureCollection object](https://tools.ietf.org/html/rfc7946#section-3.3)\nand contains one or more `Feature`s.","summary":"<p>A <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code> represents a <a href=\"https://tools.ietf.org/html/rfc7946#section-3.3\">GeoJSON FeatureCollection object</a> and contains one or more <code><a href=\"../GeoJSON/Feature.html\">Feature</a></code>s.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `FeatureCollection` represents a [GeoJSON FeatureCollection object](https://tools.ietf.org/html/rfc7946#section-3.3)\nand contains one or more `Feature`s.","summary":"<p>A <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code> represents a <a href=\"https://tools.ietf.org/html/rfc7946#section-3.3\">GeoJSON FeatureCollection object</a> and contains one or more <code><a href=\"../GeoJSON/Feature.html\">Feature</a></code>s.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/feature_collection.cr","line_number":4,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(features:Array(Feature),*,bbox=nil)-class-method","name":"new","doc":"Creates a new `FeatureCollection` with the given *features*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code> with the given <em>features</em>.</p>","abstract":false,"args":[{"name":"features","external_name":"features","restriction":"Array(Feature)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(features : Array(Feature), *, bbox = nil)","args_html":"(features : Array(<a href=\"../GeoJSON/Feature.html\">Feature</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/feature_collection.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"features","external_name":"features","restriction":"Array(Feature)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(features, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/feature_collection.cr","line_number":15,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\nfeatures.each do |feature|\n  feature.bbox.try do |feature_bbox|\n    if result[0] > feature_bbox[0]\n      result[0] = feature_bbox[0]\n    end\n    if result[1] > feature_bbox[1]\n      result[1] = feature_bbox[1]\n    end\n    if result[2] < feature_bbox[2]\n      result[2] = feature_bbox[2]\n    end\n    if result[3] < feature_bbox[3]\n      result[3] = feature_bbox[3]\n    end\n  end\nend\nresult\n"}},{"html_id":"features:Array(Feature)-instance-method","name":"features","doc":"Returns this `FeatureCollections` array of features.","summary":"<p>Returns this <code>FeatureCollections</code> array of features.</p>","abstract":false,"location":{"filename":"src/geojson/feature_collection.cr","line_number":9,"url":null},"def":{"name":"features","return_type":"Array(Feature)","visibility":"Public","body":"@features"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this FeatureCollection's GeoJSON type (\"FeatureCollection\")","summary":"<p>Gets this FeatureCollection's GeoJSON type (&quot;FeatureCollection&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/feature_collection.cr","line_number":6,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/GeometryCollection","path":"GeoJSON/GeometryCollection.html","kind":"class","full_name":"GeoJSON::GeometryCollection","name":"GeometryCollection","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/geometry_collection.cr","line_number":10,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `GeometryCollection` represents a collection of several geometries.\n\nIts array of geometries can contain `Point`, `MultiPoint`, `LineString`,\n`MultiLineString`, `Polygon`, and `MultiPolygon`. Technically, you can nest\n`GeometryCollection`s inside one another, but this is discouraged by the\nspecification.\n\nThis class corresponds to the [GeoJSON GeometryCollection](https://tools.ietf.org/html/rfc7946#section-3.1.8).","summary":"<p>A <code><a href=\"../GeoJSON/GeometryCollection.html\">GeometryCollection</a></code> represents a collection of several geometries.</p>","class_methods":[{"html_id":"read_geometries(pull:JSON::PullParser)-class-method","name":"read_geometries","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/geometry_collection.cr","line_number":39,"url":null},"def":{"name":"read_geometries","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"geometries = [] of GeoJSON::Object::Type\npull.read_begin_array\nwhile !pull.kind.end_array?\n  case pull.kind\n  when .begin_object?\n    if geometry = GeoJSON::Object.new(pull)\n      geometries << geometry\n    end\n  else\n    pull.read_next\n  end\nend\ngeometries\n"}}],"constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"Deserializes a `GeometryCollection` from the given JSON *parser*.","summary":"<p>Deserializes a <code><a href=\"../GeoJSON/GeometryCollection.html\">GeometryCollection</a></code> from the given JSON <em>parser</em>.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/geometry_collection.cr","line_number":24,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"JSON::PullParser"}],"visibility":"Public","body":"geometries = [] of GeoJSON::Object::Type\npull.read_begin_object\nwhile !pull.kind.end_object?\n  if pull.kind.string? && (pull.read_string == \"geometries\")\n    geometries = read_geometries(pull)\n  else\n    pull.read_next\n  end\nend\nGeoJSON::GeometryCollection.new(geometries)\n"}},{"html_id":"new(geometries:Array(GeoJSON::Object::Type),*,bbox=nil)-class-method","name":"new","doc":"Creates a new `GeometryCollection` containing the given *geometries* and\noptional bounding box *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/GeometryCollection.html\">GeometryCollection</a></code> containing the given <em>geometries</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"geometries","external_name":"geometries","restriction":"Array(GeoJSON::Object::Type)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(geometries : Array(GeoJSON::Object::Type), *, bbox = nil)","args_html":"(geometries : Array(<a href=\"../GeoJSON/Object/Type.html\">GeoJSON::Object::Type</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/geometry_collection.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"geometries","external_name":"geometries","restriction":"Array(GeoJSON::Object::Type)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(geometries, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/geometry_collection.cr","line_number":58,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\ngeometries.each do |object|\n  object.bbox.try do |object_bbox|\n    if result[0] > object_bbox[0]\n      result[0] = object_bbox[0]\n    end\n    if result[1] > object_bbox[1]\n      result[1] = object_bbox[1]\n    end\n    if result[2] < object_bbox[2]\n      result[2] = object_bbox[2]\n    end\n    if result[3] < object_bbox[3]\n      result[3] = object_bbox[3]\n    end\n  end\nend\nresult\n"}},{"html_id":"geometries:Array(GeoJSON::Object::Type)-instance-method","name":"geometries","doc":"Returns an array of the geometries in this `GeometryCollection`","summary":"<p>Returns an array of the geometries in this <code><a href=\"../GeoJSON/GeometryCollection.html\">GeometryCollection</a></code></p>","abstract":false,"location":{"filename":"src/geojson/geometry_collection.cr","line_number":15,"url":null},"def":{"name":"geometries","return_type":"Array(GeoJSON::Object::Type)","visibility":"Public","body":"@geometries"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this GeometryCollection's GeoJSON type (\"GeometryCollection\")","summary":"<p>Gets this GeometryCollection's GeoJSON type (&quot;GeometryCollection&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/geometry_collection.cr","line_number":12,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/LineString","path":"GeoJSON/LineString.html","kind":"class","full_name":"GeoJSON::LineString","name":"LineString","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/line_string.cr","line_number":6,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `LineString` is a `Geometry` representing two or more points in geographic\nspace connected consecutively by lines.\n\nThis class corresponds to the [GeoJSON LineString](https://tools.ietf.org/html/rfc7946#section-3.1.4).","summary":"<p>A <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> is a <code>Geometry</code> representing two or more points in geographic space connected consecutively by lines.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `LineString` is a `Geometry` representing two or more points in geographic\nspace connected consecutively by lines.\n\nThis class corresponds to the [GeoJSON LineString](https://tools.ietf.org/html/rfc7946#section-3.1.4).","summary":"<p>A <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> is a <code>Geometry</code> representing two or more points in geographic space connected consecutively by lines.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/line_string.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(coordinates:Array(Coordinates),*,bbox=nil)-class-method","name":"new","doc":"Create a new `LineString` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Coordinates)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Coordinates), *, bbox = nil)","args_html":"(coordinates : Array(<a href=\"../GeoJSON/Coordinates.html\">Coordinates</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/line_string.cr","line_number":18,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Coordinates)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Point),*,bbox=nil)-class-method","name":"new","doc":"Create a new `LineString` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Point)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Point), *, bbox = nil)","args_html":"(coordinates : Array(<a href=\"../GeoJSON/Point.html\">Point</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/line_string.cr","line_number":23,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Point)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Array(Float64)),*,bbox=nil)-class-method","name":"new","doc":"Create a new `LineString` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Float64))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Float64)), *, bbox = nil)","args_html":"(coordinates : Array(Array(Float64)), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/line_string.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Float64))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":"Gets the LineString vertex at the given index.","summary":"<p>Gets the LineString vertex at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/line_string.cr","line_number":14,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":"Gets the LineString vertex at the given index.","summary":"<p>Gets the LineString vertex at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/line_string.cr","line_number":14,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/line_string.cr","line_number":36,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\n@coordinates.each do |coord|\n  if result[0] > coord[0]\n    result[0] = coord[0]\n  end\n  if result[1] > coord[1]\n    result[1] = coord[1]\n  end\n  if result[2] < coord[0]\n    result[2] = coord[0]\n  end\n  if result[3] < coord[1]\n    result[3] = coord[1]\n  end\nend\nresult\n"}},{"html_id":"coordinates:Array(Coordinates)-instance-method","name":"coordinates","doc":"Gets this LineString's GeoJSON type (\"LineString\")","summary":"<p>Gets this LineString's GeoJSON type (&quot;LineString&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/line_string.cr","line_number":11,"url":null},"def":{"name":"coordinates","return_type":"Array(Coordinates)","visibility":"Public","body":"@coordinates"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this LineString's GeoJSON type (\"LineString\")","summary":"<p>Gets this LineString's GeoJSON type (&quot;LineString&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/line_string.cr","line_number":8,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/MultiLineString","path":"GeoJSON/MultiLineString.html","kind":"class","full_name":"GeoJSON::MultiLineString","name":"MultiLineString","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/multi_line_string.cr","line_number":5,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `MultiLineString` is a `Geometry` representing several `LineString`s.\n\nThis class corresponds to the [GeoJSON MultiLineString](https://tools.ietf.org/html/rfc7946#section-3.1.5).","summary":"<p>A <code><a href=\"../GeoJSON/MultiLineString.html\">MultiLineString</a></code> is a <code>Geometry</code> representing several <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code>s.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `MultiLineString` is a `Geometry` representing several `LineString`s.\n\nThis class corresponds to the [GeoJSON MultiLineString](https://tools.ietf.org/html/rfc7946#section-3.1.5).","summary":"<p>A <code><a href=\"../GeoJSON/MultiLineString.html\">MultiLineString</a></code> is a <code>Geometry</code> representing several <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code>s.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/multi_line_string.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(coordinates:Array(LineString),*,bbox=nil)-class-method","name":"new","doc":"Create a new `MultiLineString` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/MultiLineString.html\">MultiLineString</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(LineString)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(LineString), *, bbox = nil)","args_html":"(coordinates : Array(<a href=\"../GeoJSON/LineString.html\">LineString</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/multi_line_string.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(LineString)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Array(Array(Float64))),*,bbox=nil)-class-method","name":"new","doc":"Create a new `MultiLineString` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/MultiLineString.html\">MultiLineString</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Array(Float64)))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Array(Float64))), *, bbox = nil)","args_html":"(coordinates : Array(Array(Array(Float64))), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/multi_line_string.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Array(Float64)))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(line_string:Array(LineString))-instance-method","name":"<<","doc":"Adds the given *line_string* to this MultiLineString.","summary":"<p>Adds the given <em>line_string</em> to this MultiLineString.</p>","abstract":false,"args":[{"name":"line_string","external_name":"line_string","restriction":"Array(LineString)"}],"args_string":"(line_string : Array(LineString))","args_html":"(line_string : Array(<a href=\"../GeoJSON/LineString.html\">LineString</a>))","location":{"filename":"src/geojson/multi_line_string.cr","line_number":29,"url":null},"def":{"name":"<<","args":[{"name":"line_string","external_name":"line_string","restriction":"Array(LineString)"}],"visibility":"Public","body":"@coordinates << line_string"}},{"html_id":"<<(coordinate:Array(Array(Float64)))-instance-method","name":"<<","doc":"Adds the given *coordinate* to this MultiLineString.","summary":"<p>Adds the given <em>coordinate</em> to this MultiLineString.</p>","abstract":false,"args":[{"name":"coordinate","external_name":"coordinate","restriction":"Array(Array(Float64))"}],"args_string":"(coordinate : Array(Array(Float64)))","args_html":"(coordinate : Array(Array(Float64)))","location":{"filename":"src/geojson/multi_line_string.cr","line_number":34,"url":null},"def":{"name":"<<","args":[{"name":"coordinate","external_name":"coordinate","restriction":"Array(Array(Float64))"}],"visibility":"Public","body":"@coordinates << (LineString.new(coordinate)).coordinates"}},{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":"Gets the `LineString` at the given index.","summary":"<p>Gets the <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/multi_line_string.cr","line_number":13,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":"Gets the `LineString` at the given index.","summary":"<p>Gets the <code><a href=\"../GeoJSON/LineString.html\">LineString</a></code> at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/multi_line_string.cr","line_number":13,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/multi_line_string.cr","line_number":38,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\n@coordinates.each do |line|\n  line.each do |coord|\n    if result[0] > coord[0]\n      result[0] = coord[0]\n    end\n    if result[1] > coord[1]\n      result[1] = coord[1]\n    end\n    if result[2] < coord[0]\n      result[2] = coord[0]\n    end\n    if result[3] < coord[1]\n      result[3] = coord[1]\n    end\n  end\nend\nresult\n"}},{"html_id":"coordinates:Array(Array(GeoJSON::Coordinates))-instance-method","name":"coordinates","doc":"Returns an array of this MultiLineString's coordinates.","summary":"<p>Returns an array of this MultiLineString's coordinates.</p>","abstract":false,"location":{"filename":"src/geojson/multi_line_string.cr","line_number":10,"url":null},"def":{"name":"coordinates","return_type":"Array(Array(GeoJSON::Coordinates))","visibility":"Public","body":"@coordinates"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this MultiLineString's GeoJSON type (\"MultiLineString\")","summary":"<p>Gets this MultiLineString's GeoJSON type (&quot;MultiLineString&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/multi_line_string.cr","line_number":7,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/MultiPoint","path":"GeoJSON/MultiPoint.html","kind":"class","full_name":"GeoJSON::MultiPoint","name":"MultiPoint","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/multi_point.cr","line_number":5,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `MultiPoint` is a `Geometry` representing several `Point`s.\n\nThis class corresponds to the [GeoJSON MultiPoint](https://tools.ietf.org/html/rfc7946#section-3.1.3).","summary":"<p>A <code><a href=\"../GeoJSON/MultiPoint.html\">MultiPoint</a></code> is a <code>Geometry</code> representing several <code><a href=\"../GeoJSON/Point.html\">Point</a></code>s.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `MultiPoint` is a `Geometry` representing several `Point`s.\n\nThis class corresponds to the [GeoJSON MultiPoint](https://tools.ietf.org/html/rfc7946#section-3.1.3).","summary":"<p>A <code><a href=\"../GeoJSON/MultiPoint.html\">MultiPoint</a></code> is a <code>Geometry</code> representing several <code><a href=\"../GeoJSON/Point.html\">Point</a></code>s.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/multi_point.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(coordinates:Array(Point),*,bbox=nil)-class-method","name":"new","doc":"Create a new `MultiPoint` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/MultiPoint.html\">MultiPoint</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Point)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Point), *, bbox = nil)","args_html":"(coordinates : Array(<a href=\"../GeoJSON/Point.html\">Point</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/multi_point.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Point)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Array(Float64)),*,bbox=nil)-class-method","name":"new","doc":"Create a new `MultiPoint` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/MultiPoint.html\">MultiPoint</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Float64))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Float64)), *, bbox = nil)","args_html":"(coordinates : Array(Array(Float64)), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/multi_point.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Float64))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(point:Array(Point))-instance-method","name":"<<","doc":"Adds the given *point* to this MultiPoint.","summary":"<p>Adds the given <em>point</em> to this MultiPoint.</p>","abstract":false,"args":[{"name":"point","external_name":"point","restriction":"Array(Point)"}],"args_string":"(point : Array(Point))","args_html":"(point : Array(<a href=\"../GeoJSON/Point.html\">Point</a>))","location":{"filename":"src/geojson/multi_point.cr","line_number":29,"url":null},"def":{"name":"<<","args":[{"name":"point","external_name":"point","restriction":"Array(Point)"}],"visibility":"Public","body":"@coordinates << point.coordinates"}},{"html_id":"<<(coordinate:Array(Float64))-instance-method","name":"<<","doc":"Adds the given *coordinate* to this MultiPoint.","summary":"<p>Adds the given <em>coordinate</em> to this MultiPoint.</p>","abstract":false,"args":[{"name":"coordinate","external_name":"coordinate","restriction":"Array(Float64)"}],"args_string":"(coordinate : Array(Float64))","args_html":"(coordinate : Array(Float64))","location":{"filename":"src/geojson/multi_point.cr","line_number":34,"url":null},"def":{"name":"<<","args":[{"name":"coordinate","external_name":"coordinate","restriction":"Array(Float64)"}],"visibility":"Public","body":"@coordinates << (Point.new(coordinate)).coordinates"}},{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":"Gets the `Point` at the given index.","summary":"<p>Gets the <code><a href=\"../GeoJSON/Point.html\">Point</a></code> at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/multi_point.cr","line_number":13,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":"Gets the `Point` at the given index.","summary":"<p>Gets the <code><a href=\"../GeoJSON/Point.html\">Point</a></code> at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/multi_point.cr","line_number":13,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/multi_point.cr","line_number":38,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\n@coordinates.each do |coord|\n  if result[0] > coord[0]\n    result[0] = coord[0]\n  end\n  if result[1] > coord[1]\n    result[1] = coord[1]\n  end\n  if result[2] < coord[0]\n    result[2] = coord[0]\n  end\n  if result[3] < coord[1]\n    result[3] = coord[1]\n  end\nend\nresult\n"}},{"html_id":"coordinates:Array(Coordinates)-instance-method","name":"coordinates","doc":"Returns an array of this MultiPoint's coordinates.","summary":"<p>Returns an array of this MultiPoint's coordinates.</p>","abstract":false,"location":{"filename":"src/geojson/multi_point.cr","line_number":10,"url":null},"def":{"name":"coordinates","return_type":"Array(Coordinates)","visibility":"Public","body":"@coordinates"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this MultiPoint's GeoJSON type (\"MultiPoint\")","summary":"<p>Gets this MultiPoint's GeoJSON type (&quot;MultiPoint&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/multi_point.cr","line_number":7,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/MultiPolygon","path":"GeoJSON/MultiPolygon.html","kind":"class","full_name":"GeoJSON::MultiPolygon","name":"MultiPolygon","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/multi_polygon.cr","line_number":5,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `MultiPolygon` is a `Geometry` representing several `Polygon`s.\n\nThis class corresponds to the [GeoJSON MultiPolygon](https://tools.ietf.org/html/rfc7946#section-3.1.7).","summary":"<p>A <code><a href=\"../GeoJSON/MultiPolygon.html\">MultiPolygon</a></code> is a <code>Geometry</code> representing several <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code>s.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `MultiPolygon` is a `Geometry` representing several `Polygon`s.\n\nThis class corresponds to the [GeoJSON MultiPolygon](https://tools.ietf.org/html/rfc7946#section-3.1.7).","summary":"<p>A <code><a href=\"../GeoJSON/MultiPolygon.html\">MultiPolygon</a></code> is a <code>Geometry</code> representing several <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code>s.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/multi_polygon.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(coordinates:Array(Polygon),*,bbox=nil)-class-method","name":"new","doc":"Create a new `MultiPolygon` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/MultiPolygon.html\">MultiPolygon</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Polygon)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Polygon), *, bbox = nil)","args_html":"(coordinates : Array(<a href=\"../GeoJSON/Polygon.html\">Polygon</a>), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/multi_polygon.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Polygon)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Array(Array(Array(Float64)))),*,bbox=nil)-class-method","name":"new","doc":"Create a new `MultiPolygon` with the given *coordinates* and optional\nbounding box *bbox*.","summary":"<p>Create a new <code><a href=\"../GeoJSON/MultiPolygon.html\">MultiPolygon</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Array(Array(Float64))))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Array(Array(Float64)))), *, bbox = nil)","args_html":"(coordinates : Array(Array(Array(Array(Float64)))), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/multi_polygon.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Array(Array(Float64))))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(polygon:Array(Polygon))-instance-method","name":"<<","doc":"Adds the given *polygon* to this MultiPolygon.","summary":"<p>Adds the given <em>polygon</em> to this MultiPolygon.</p>","abstract":false,"args":[{"name":"polygon","external_name":"polygon","restriction":"Array(Polygon)"}],"args_string":"(polygon : Array(Polygon))","args_html":"(polygon : Array(<a href=\"../GeoJSON/Polygon.html\">Polygon</a>))","location":{"filename":"src/geojson/multi_polygon.cr","line_number":29,"url":null},"def":{"name":"<<","args":[{"name":"polygon","external_name":"polygon","restriction":"Array(Polygon)"}],"visibility":"Public","body":"@coordinates << polygon.coordinates"}},{"html_id":"<<(coordinate:Array(Array(Array(Float64))))-instance-method","name":"<<","doc":"Adds the given *coordinate* to this MultiPolygon.","summary":"<p>Adds the given <em>coordinate</em> to this MultiPolygon.</p>","abstract":false,"args":[{"name":"coordinate","external_name":"coordinate","restriction":"Array(Array(Array(Float64)))"}],"args_string":"(coordinate : Array(Array(Array(Float64))))","args_html":"(coordinate : Array(Array(Array(Float64))))","location":{"filename":"src/geojson/multi_polygon.cr","line_number":34,"url":null},"def":{"name":"<<","args":[{"name":"coordinate","external_name":"coordinate","restriction":"Array(Array(Array(Float64)))"}],"visibility":"Public","body":"@coordinates << (Polygon.new(coordinate)).coordinates"}},{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":"Gets the `Polygon` at the given index.","summary":"<p>Gets the <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/multi_polygon.cr","line_number":13,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":"Gets the `Polygon` at the given index.","summary":"<p>Gets the <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> at the given index.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/multi_polygon.cr","line_number":13,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/multi_polygon.cr","line_number":38,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\n@coordinates.each do |polygon|\n  polygon.each do |ring|\n    ring.each do |coord|\n      if result[0] > coord[0]\n        result[0] = coord[0]\n      end\n      if result[1] > coord[1]\n        result[1] = coord[1]\n      end\n      if result[2] < coord[0]\n        result[2] = coord[0]\n      end\n      if result[3] < coord[1]\n        result[3] = coord[1]\n      end\n    end\n  end\nend\nresult\n"}},{"html_id":"coordinates:Array(Array(Array(GeoJSON::Coordinates)))-instance-method","name":"coordinates","doc":"Returns an array of this MultiPolygon's coordinates.","summary":"<p>Returns an array of this MultiPolygon's coordinates.</p>","abstract":false,"location":{"filename":"src/geojson/multi_polygon.cr","line_number":10,"url":null},"def":{"name":"coordinates","return_type":"Array(Array(Array(GeoJSON::Coordinates)))","visibility":"Public","body":"@coordinates"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this MultiPolygon's GeoJSON type (\"MultiPolygon\")","summary":"<p>Gets this MultiPolygon's GeoJSON type (&quot;MultiPolygon&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/multi_polygon.cr","line_number":7,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/Object","path":"GeoJSON/Object.html","kind":"class","full_name":"GeoJSON::Object","name":"Object","abstract":true,"superclass":{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/object.cr","line_number":14,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"}],"subclasses":[{"html_id":"geojson/GeoJSON/Feature","kind":"class","full_name":"GeoJSON::Feature","name":"Feature"},{"html_id":"geojson/GeoJSON/FeatureCollection","kind":"class","full_name":"GeoJSON::FeatureCollection","name":"FeatureCollection"},{"html_id":"geojson/GeoJSON/GeometryCollection","kind":"class","full_name":"GeoJSON::GeometryCollection","name":"GeometryCollection"},{"html_id":"geojson/GeoJSON/LineString","kind":"class","full_name":"GeoJSON::LineString","name":"LineString"},{"html_id":"geojson/GeoJSON/MultiLineString","kind":"class","full_name":"GeoJSON::MultiLineString","name":"MultiLineString"},{"html_id":"geojson/GeoJSON/MultiPoint","kind":"class","full_name":"GeoJSON::MultiPoint","name":"MultiPoint"},{"html_id":"geojson/GeoJSON/MultiPolygon","kind":"class","full_name":"GeoJSON::MultiPolygon","name":"MultiPolygon"},{"html_id":"geojson/GeoJSON/Point","kind":"class","full_name":"GeoJSON::Point","name":"Point"},{"html_id":"geojson/GeoJSON/Polygon","kind":"class","full_name":"GeoJSON::Polygon","name":"Polygon"}],"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"GeoJSON Object\n\nA GeoJSON object represents a Geometry, Feature, or collection of Features.\n\n* A GeoJSON object is a JSON object.\n* A GeoJSON object has a member with the name \"type\". The value of\n  the member MUST be one of the GeoJSON types.\n  `Point`, `MultiPoint`, `LineString`, `MultiLineString`, `Polygon`, `MultiPolygon`,\n  `GeometryCollection`, `Feature`, and `FeatureCollection`\n* A GeoJSON object MAY have a \"bbox\" member, the value of which MUST\n  be a bounding box array\n* A GeoJSON object MAY have other members","summary":"<p>GeoJSON Object</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/object.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"location = pull.location\ndiscriminator_value = nil\njson = String.build do |io|\n  JSON.build(io) do |builder|\n    builder.start_object\n    pull.read_object do |key|\n      if key == \"type\"\n        value_kind = pull.kind\n        case value_kind\n        when .string?\n          discriminator_value = pull.string_value\n        when .int?\n          discriminator_value = pull.int_value\n        when .bool?\n          discriminator_value = pull.bool_value\n        else\n          raise(::JSON::SerializableError.new(\"JSON discriminator field 'type' has an invalid value type of #{value_kind.to_s}\", to_s, nil, *location, nil))\n        end\n        builder.field(key, discriminator_value)\n        pull.read_next\n      else\n        builder.field(key) do\n          pull.read_raw(builder)\n        end\n      end\n    end\n    builder.end_object\n  end\nend\nif discriminator_value\nelse\n  raise(::JSON::SerializableError.new(\"Missing JSON discriminator field 'type'\", to_s, nil, *location, nil))\nend\ncase discriminator_value\nwhen \"Point\"\n  Point.from_json(json)\nwhen \"MultiPoint\"\n  MultiPoint.from_json(json)\nwhen \"LineString\"\n  LineString.from_json(json)\nwhen \"MultiLineString\"\n  MultiLineString.from_json(json)\nwhen \"Polygon\"\n  Polygon.from_json(json)\nwhen \"MultiPolygon\"\n  MultiPolygon.from_json(json)\nelse\n  raise(::JSON::SerializableError.new(\"Unknown 'type' discriminator value: #{discriminator_value.inspect}\", to_s, nil, *location, nil))\nend\n"}}],"instance_methods":[{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":true,"location":{"filename":"src/geojson/object.cr","line_number":26,"url":null},"def":{"name":"bbox","visibility":"Public","body":""}},{"html_id":"type:String-instance-method","name":"type","abstract":true,"location":{"filename":"src/geojson/object.cr","line_number":23,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":""}}],"types":[{"html_id":"geojson/GeoJSON/Object/Type","path":"GeoJSON/Object/Type.html","kind":"alias","full_name":"GeoJSON::Object::Type","name":"Type","abstract":false,"locations":[{"filename":"src/geojson/object.cr","line_number":21,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":true,"aliased":"GeoJSON::Object+","aliased_html":"<a href=\"../../GeoJSON/Object.html\">GeoJSON::Object</a>","const":false,"namespace":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"doc":"All possible GeoJSON types.","summary":"<p>All possible GeoJSON types.</p>"}]},{"html_id":"geojson/GeoJSON/Point","path":"GeoJSON/Point.html","kind":"class","full_name":"GeoJSON::Point","name":"Point","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/point.cr","line_number":6,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `Point` is a `Geometry` representing a single `Position` in geographic\nspace.\n\nThis class corresponds to the [GeoJSON Point](https://tools.ietf.org/html/rfc7946#section-3.1.2).","summary":"<p>A <code><a href=\"../GeoJSON/Point.html\">Point</a></code> is a <code>Geometry</code> representing a single <code>Position</code> in geographic space.</p>","constructors":[{"html_id":"new(longitude,latitude,altitude=nil,bbox=nil)-class-method","name":"new","doc":"Creates a new `Point` at the given *longitude*, *latitude*, and optional\n*altitude*, and with optional bounding box *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Point.html\">Point</a></code> at the given <em>longitude</em>, <em>latitude</em>, and optional <em>altitude</em>, and with optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"longitude","external_name":"longitude","restriction":""},{"name":"latitude","external_name":"latitude","restriction":""},{"name":"altitude","default_value":"nil","external_name":"altitude","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(longitude, latitude, altitude = nil, bbox = nil)","args_html":"(longitude, latitude, altitude = <span class=\"n\">nil</span>, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/point.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"longitude","external_name":"longitude","restriction":""},{"name":"latitude","external_name":"latitude","restriction":""},{"name":"altitude","default_value":"nil","external_name":"altitude","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(longitude, latitude, altitude, bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `Point` is a `Geometry` representing a single `Position` in geographic\nspace.\n\nThis class corresponds to the [GeoJSON Point](https://tools.ietf.org/html/rfc7946#section-3.1.2).","summary":"<p>A <code><a href=\"../GeoJSON/Point.html\">Point</a></code> is a <code>Geometry</code> representing a single <code>Position</code> in geographic space.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/point.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(coordinates:GeoJSON::Coordinates,*,bbox=nil)-class-method","name":"new","doc":"Creates a new `Point` with the given *coordinates* and optional bounding\nbox *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Point.html\">Point</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"GeoJSON::Coordinates"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : GeoJSON::Coordinates, *, bbox = nil)","args_html":"(coordinates : <a href=\"../GeoJSON/Coordinates.html\">GeoJSON::Coordinates</a>, *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/point.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"GeoJSON::Coordinates"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Float64),*,bbox=nil)-class-method","name":"new","doc":"Creates a new `Point` with the given *coordinates* and optional bounding\nbox *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Point.html\">Point</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Float64), *, bbox = nil)","args_html":"(coordinates : Array(Float64), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/point.cr","line_number":25,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Float64)"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif coordinates == other.coordinates\nelse\n  return false\nend\ntrue\n"}},{"html_id":"altitude(*args,**options)-instance-method","name":"altitude","doc":"Gets this Point's altitude.\n\nTechnically, this positional value is meant to be the height in meters\nabove the WGS84 ellipsoid.","summary":"<p>Gets this Point's altitude.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/point.cr","line_number":43,"url":null},"def":{"name":"altitude","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates.altitude(*args, **options)"}},{"html_id":"altitude(*args,**options,&)-instance-method","name":"altitude","doc":"Gets this Point's altitude.\n\nTechnically, this positional value is meant to be the height in meters\nabove the WGS84 ellipsoid.","summary":"<p>Gets this Point's altitude.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/point.cr","line_number":43,"url":null},"def":{"name":"altitude","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.altitude(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/point.cr","line_number":29,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\n[coordinates[0], coordinates[1], coordinates[0], coordinates[1]]\n"}},{"html_id":"coordinates:Coordinates-instance-method","name":"coordinates","doc":"Returns this Point's coordinates.","summary":"<p>Returns this Point's coordinates.</p>","abstract":false,"location":{"filename":"src/geojson/point.cr","line_number":11,"url":null},"def":{"name":"coordinates","return_type":"Coordinates","visibility":"Public","body":"@coordinates"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = coordinates.hash(hasher)\nhasher\n"}},{"html_id":"latitude(*args,**options)-instance-method","name":"latitude","doc":"Gets this Point's latitude in decimal degrees according to WGS84.","summary":"<p>Gets this Point's latitude in decimal degrees according to WGS84.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/point.cr","line_number":38,"url":null},"def":{"name":"latitude","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates.latitude(*args, **options)"}},{"html_id":"latitude(*args,**options,&)-instance-method","name":"latitude","doc":"Gets this Point's latitude in decimal degrees according to WGS84.","summary":"<p>Gets this Point's latitude in decimal degrees according to WGS84.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/point.cr","line_number":38,"url":null},"def":{"name":"latitude","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.latitude(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"longitude(*args,**options)-instance-method","name":"longitude","doc":"Gets this Point's longitude in decimal degrees according to WGS84.","summary":"<p>Gets this Point's longitude in decimal degrees according to WGS84.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/geojson/point.cr","line_number":36,"url":null},"def":{"name":"longitude","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"coordinates.longitude(*args, **options)"}},{"html_id":"longitude(*args,**options,&)-instance-method","name":"longitude","doc":"Gets this Point's longitude in decimal degrees according to WGS84.","summary":"<p>Gets this Point's longitude in decimal degrees according to WGS84.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/geojson/point.cr","line_number":36,"url":null},"def":{"name":"longitude","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"coordinates.longitude(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this Point's GeoJSON type (\"Point\")","summary":"<p>Gets this Point's GeoJSON type (&quot;Point&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/point.cr","line_number":8,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]},{"html_id":"geojson/GeoJSON/Polygon","path":"GeoJSON/Polygon.html","kind":"class","full_name":"GeoJSON::Polygon","name":"Polygon","abstract":false,"superclass":{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},"ancestors":[{"html_id":"geojson/GeoJSON/Object","kind":"class","full_name":"GeoJSON::Object","name":"Object"},{"html_id":"geojson/JSON/Serializable/Unmapped","kind":"module","full_name":"JSON::Serializable::Unmapped","name":"Unmapped"},{"html_id":"geojson/JSON/Serializable","kind":"module","full_name":"JSON::Serializable","name":"Serializable"},{"html_id":"geojson/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"geojson/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/geojson/polygon.cr","line_number":6,"url":null}],"repository_name":"geojson","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"geojson/GeoJSON","kind":"module","full_name":"GeoJSON","name":"GeoJSON"},"doc":"A `Polygon` is a `Geometry` representing a closed geometric figure in\ngeographic space with optional holes within it.\n\nThis class corresponds to the [GeoJSON Polygon](https://tools.ietf.org/html/rfc7946#section-3.1.6).","summary":"<p>A <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> is a <code>Geometry</code> representing a closed geometric figure in geographic space with optional holes within it.</p>","constructors":[{"html_id":"new(pull:JSON::PullParser)-class-method","name":"new","doc":"A `Polygon` is a `Geometry` representing a closed geometric figure in\ngeographic space with optional holes within it.\n\nThis class corresponds to the [GeoJSON Polygon](https://tools.ietf.org/html/rfc7946#section-3.1.6).","summary":"<p>A <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> is a <code>Geometry</code> representing a closed geometric figure in geographic space with optional holes within it.</p>","abstract":false,"args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"args_string":"(pull : JSON::PullParser)","args_html":"(pull : JSON::PullParser)","location":{"filename":"src/geojson/polygon.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"pull","external_name":"pull","restriction":"::JSON::PullParser"}],"visibility":"Public","body":"new_from_json_pull_parser(pull)"}},{"html_id":"new(coordinates:Array(Array(Coordinates)),*,bbox=nil)-class-method","name":"new","doc":"Creates a new `Polygon` with the given *coordinates* and optional bounding\nbox *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Coordinates))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Coordinates)), *, bbox = nil)","args_html":"(coordinates : Array(Array(<a href=\"../GeoJSON/Coordinates.html\">Coordinates</a>)), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/polygon.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Coordinates))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Array(Point)),*,bbox=nil)-class-method","name":"new","doc":"Creates a new `Polygon` with the given *coordinates* and optional bounding\nbox *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Point))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Point)), *, bbox = nil)","args_html":"(coordinates : Array(Array(<a href=\"../GeoJSON/Point.html\">Point</a>)), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/polygon.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Point))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(coordinates:Array(Array(Array(Float64))),*,bbox=nil)-class-method","name":"new","doc":"Creates a new `Polygon` with the given *coordinates* and optional bounding\nbox *bbox*.","summary":"<p>Creates a new <code><a href=\"../GeoJSON/Polygon.html\">Polygon</a></code> with the given <em>coordinates</em> and optional bounding box <em>bbox</em>.</p>","abstract":false,"args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Array(Float64)))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"args_string":"(coordinates : Array(Array(Array(Float64))), *, bbox = nil)","args_html":"(coordinates : Array(Array(Array(Float64))), *, bbox = <span class=\"n\">nil</span>)","location":{"filename":"src/geojson/polygon.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"coordinates","external_name":"coordinates","restriction":"Array(Array(Array(Float64)))"},{"name":"","external_name":"","restriction":""},{"name":"bbox","default_value":"nil","external_name":"bbox","restriction":""}],"splat_index":1,"visibility":"Public","body":"_ = allocate\n_.initialize(coordinates, bbox: bbox)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"bbox-instance-method","name":"bbox","doc":"Calculates the bounding box for any GeoJSON object, including `FeatureCollection`.","summary":"<p>Calculates the bounding box for any GeoJSON object, including <code><a href=\"../GeoJSON/FeatureCollection.html\">FeatureCollection</a></code>.</p>","abstract":false,"location":{"filename":"src/geojson/polygon.cr","line_number":37,"url":null},"def":{"name":"bbox","visibility":"Public","body":"if @bbox\n  return @bbox\nend\nresult = [Float64::INFINITY, Float64::INFINITY, -Float64::INFINITY, -Float64::INFINITY]\n@coordinates.each do |ring|\n  ring.each do |coord|\n    if result[0] > coord[0]\n      result[0] = coord[0]\n    end\n    if result[1] > coord[1]\n      result[1] = coord[1]\n    end\n    if result[2] < coord[0]\n      result[2] = coord[0]\n    end\n    if result[3] < coord[1]\n      result[3] = coord[1]\n    end\n  end\nend\nresult\n"}},{"html_id":"coordinates:Array(Array(Coordinates))-instance-method","name":"coordinates","doc":"Returns this Polygon's linear ring coordinates.","summary":"<p>Returns this Polygon's linear ring coordinates.</p>","abstract":false,"location":{"filename":"src/geojson/polygon.cr","line_number":11,"url":null},"def":{"name":"coordinates","return_type":"Array(Array(Coordinates))","visibility":"Public","body":"@coordinates"}},{"html_id":"type:String-instance-method","name":"type","doc":"Gets this Polygon's GeoJSON type (\"Polygon\")","summary":"<p>Gets this Polygon's GeoJSON type (&quot;Polygon&quot;)</p>","abstract":false,"location":{"filename":"src/geojson/polygon.cr","line_number":8,"url":null},"def":{"name":"type","return_type":"String","visibility":"Public","body":"@type"}}]}]}]}})